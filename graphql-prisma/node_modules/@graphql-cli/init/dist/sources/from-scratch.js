"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromScratch = void 0;
const tslib_1 = require("tslib");
const ora_1 = tslib_1.__importDefault(require("ora"));
const promise_1 = tslib_1.__importDefault(require("simple-git/promise"));
const rimraf_1 = tslib_1.__importDefault(require("rimraf"));
const cross_fetch_1 = tslib_1.__importDefault(require("cross-fetch"));
const tmp_1 = tslib_1.__importDefault(require("tmp"));
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const inquirer_1 = require("inquirer");
async function fromScratch({ context, templateName, templateUrl, }) {
    if (!context.name) {
        const { projectName: enteredName } = await inquirer_1.prompt([
            {
                type: 'input',
                name: 'projectName',
                message: 'What is the name of the project?',
                default: 'my-graphql-project',
            },
        ]);
        context.name = enteredName;
        context.path = path_1.join(process.cwd(), context.name);
    }
    if (!templateName) {
        const downloadingTemplateList = ora_1.default('Loading template list...').start();
        const templateMap = await cross_fetch_1.default('https://raw.githubusercontent.com/Urigo/graphql-cli/master/templates.json').then((res) => res.json());
        downloadingTemplateList.succeed();
        const templateNames = Object.keys(templateMap).filter((templateName) => templateMap[templateName].projectType === context.type);
        const { templateName: enteredTemplateName } = await inquirer_1.prompt([
            {
                type: 'list',
                name: 'templateName',
                message: `Which template do you want to start with your new ${context.type} project?`,
                choices: [...templateNames, 'Other Template'],
            },
        ]);
        let subDirPath = '/';
        if (enteredTemplateName === 'Other Template') {
            const { templateUrl: enteredTemplateUrl } = await inquirer_1.prompt([
                {
                    type: 'input',
                    name: 'templateUrl',
                    message: 'Enter Git URL of the template. For example (https://github.com/ardatan/graphql-cli-fullstack-template)',
                },
            ]);
            templateUrl = enteredTemplateUrl;
        }
        else {
            const selectedTemplate = templateMap[enteredTemplateName];
            templateUrl = selectedTemplate.repository;
            context.type = selectedTemplate.projectType;
            if (selectedTemplate.path) {
                subDirPath = selectedTemplate.path;
            }
        }
        const cloningSpinner = ora_1.default(`Cloning template repository from ${templateUrl}...`).start();
        const git = promise_1.default().silent(true);
        const { name: tmpDir, removeCallback } = tmp_1.default.dirSync({ unsafeCleanup: true });
        await git.clone(templateUrl, tmpDir);
        rimraf_1.default.sync(path_1.join(tmpDir, '.git'));
        fs_extra_1.moveSync(path_1.join(tmpDir, subDirPath), context.path);
        removeCallback();
        cloningSpinner.stop();
    }
}
exports.fromScratch = fromScratch;
//# sourceMappingURL=from-scratch.js.map