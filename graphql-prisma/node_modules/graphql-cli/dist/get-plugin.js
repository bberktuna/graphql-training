"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const common_1 = require("@test-graphql-cli/common");
const resolve_from_1 = tslib_1.__importDefault(require("resolve-from"));
const latest_version_1 = tslib_1.__importDefault(require("latest-version"));
const inquirer_1 = require("inquirer");
const npm_programmatic_1 = tslib_1.__importDefault(require("npm-programmatic"));
const yarn_programmatic_1 = tslib_1.__importDefault(require("yarn-programmatic"));
const fs_1 = require("fs");
async function getPluginByName(name) {
    const possibleNames = [
        `@test-graphql-cli/${name}`,
        `@test-graphql-cli/${name}-plugin`,
        name
    ];
    const possibleModules = possibleNames.concat(path_1.resolve(process.cwd(), name)).concat(...possibleNames.map(name => resolve_from_1.default.silent(process.cwd(), name)))
        .filter(m => m);
    for (const moduleName of possibleModules) {
        try {
            const rawImport = await Promise.resolve().then(() => tslib_1.__importStar(require(moduleName)));
            if (!rawImport) {
                throw new Error(`Plugin doesn't export a valid signature!`);
            }
            return rawImport.plugin || rawImport.default;
        }
        catch (err) {
            if (err.message.indexOf(`Cannot find module '${moduleName}'`) === -1) {
                throw new common_1.DetailedError(`Unable to load CLI plugin matching ${name}`, `
                Unable to load CLI plugin matching '${name}'.
                Reason: 
                  ${err.message}
              `);
            }
        }
    }
    const possibleNamesMsg = possibleNames
        .map(name => `
        - ${name}
    `.trimRight())
        .join('');
    for (const possiblePackageName of possibleNames) {
        try {
            await latest_version_1.default(possiblePackageName);
            let isInstallAsked = false;
            if (possiblePackageName === '@test-graphql-cli/init') {
                isInstallAsked = true;
            }
            else {
                const response = await inquirer_1.prompt([
                    {
                        type: 'confirm',
                        name: 'isInstallAsked',
                        message: `${possiblePackageName} found in npm registry! Do you want to install it?`,
                    }
                ]);
                isInstallAsked = response.isInstallAsked;
            }
            if (isInstallAsked) {
                if (fs_1.existsSync(path_1.join(process.cwd(), 'yarn.lock'))) {
                    await yarn_programmatic_1.default.install([possiblePackageName], { dev: true });
                }
                else {
                    await npm_programmatic_1.default.install([possiblePackageName], { saveDev: true });
                }
                delete require.cache[possiblePackageName];
                return getPluginByName(name);
            }
        }
        catch (err) {
            if (err.message.indexOf(`Cannot find module '${possiblePackageName}'`) === -1) {
                throw new common_1.DetailedError(`Unable to install template plugin matching ${possiblePackageName}`, err.message);
            }
        }
    }
    throw new common_1.DetailedError(`Unable to find template plugin matching ${name}`, `
        Unable to find template plugin matching '${name}'
        Install one of the following packages:
        
        ${possibleNamesMsg}
      `);
}
exports.getPluginByName = getPluginByName;
//# sourceMappingURL=get-plugin.js.map